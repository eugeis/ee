import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        //maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        //maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
        classpath(platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$kotlinCoroutinesVersion"))
        classpath(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "org.openjfx:javafx-plugin:0.0.9"
    }
}

allprojects {
    group = 'ee'
    version = eeVersion
}

subprojects {
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.4"
            languageVersion = "1.4"
        }
    }

    sourceSets {
        named("main") {
            kotlin {
                srcDirs = ['src/main/kotlin', 'src-gen/main/kotlin']
            }
        }
    }

    repositories {
        mavenLocal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        //maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        //maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    publishing {
        repositories {
            mavenLocal()
            maven {
                name = "EEPackage"
                url = uri("https://maven.pkg.github.com/eugeis/ee")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
            }
        }
    }

    dependencies {
        //implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
        implementation(platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:$kotlinCoroutinesVersion"))
        implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
        //implementation(platform("org.springframework:spring-framework-bom:$springVersion"))

        //implementation(platform("io.ktor:ktor-bom:$versionKtor"))

        testCompile "org.hamcrest:hamcrest-library"
        testCompile "org.junit.jupiter:junit-jupiter-api"

        runtime "org.junit.jupiter:junit-jupiter-engine"
        runtime "org.junit.platform:junit-platform-launcher"

        runtime "ch.qos.logback:logback-classic"
    }

    task allDeps(type: DependencyReportTask) {}
}

project(':ee:tornadoFxBom') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {

        compile("no.tornado:tornadofx:$version_tornadofx") {
            exclude module: "kotlin-stdlib-jre8"
            exclude module: "kotlin-reflect"
            exclude module: "kotlin-stdlib-jdk7"
            exclude module: "kotlin-stdlib-jdk8"
        }
    }
}

project(':ee:ee-common_java') {
}

project(':ee:ee-common') {
    dependencies {
        compile project(':ee:ee-common_java')
        compile "org.slf4j:slf4j-api"
        compile "org.jetbrains.kotlin:kotlin-stdlib"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core"
    }
}

project(':ee:ee-asm') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {
        compile project(':ee:ee-common')
        compile "org.ow2.asm:asm:${version_asm}"
        compile "org.ow2.asm:asm-tree:${version_asm}"
    }
}

/*
project(':ee:ee-axon_example') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-jersey')
        compile('org.springframework.boot:spring-boot-starter-web')
        runtime('org.hsqldb:hsqldb')
        compileOnly('org.projectlombok:lombok')
        testCompile('org.springframework.boot:spring-boot-starter-test')
        compile("org.axonframework:axon-spring:${version_axon}")
        testCompile("org.axonframework:axon-test:${version_axon}")
    }
}
*/

project(':ee:ee-lang_item') {
    dependencies {
        compile project(':ee:ee-common')
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
        }
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

project(':ee:ee-design') {
    dependencies {
        compile project(':ee:ee-lang')
    }
}

project(':ee:ee-design_gen') {
    dependencies {
        compile project(':ee:ee-lang')
    }
}

project(':ee:ee-design_ui') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':ee:ee-design_ui_des') {
    dependencies {
        compile project(':ee:ee-design')
        compile project(':ee:ee-asm')
    }
}

project(':ee:ee-design_ui_des_asm') {
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    dependencies {
        compile project(':ee:ee-design')
        compile project(':ee:ee-asm')
    }

    sourceSets {
        named("main") {
            kotlin {
                srcDirs = ['src/main/kotlin']
            }
        }
    }
}

project(':ee:ee-design_swagger') {
    dependencies {
        compile project(':ee:ee-design')
        compile "io.swagger:swagger-parser:${version_swagger}"
    }
}

project(':ee:ee-design_json') {
    dependencies {
        compile project(':ee:ee-design')

        compile "com.worldturner.medeia:medeia-validator-jackson:${version_json_schema_medeia}"
        compile "com.github.everit-org.json-schema:org.everit.json.schema:1.12.1"
    }
}

project(':ee:ee-design_xsd') {
    dependencies {
        compile project(':ee:ee-design')
        compile "com.sun.xsom:xsom:${version_xsom}"
    }
}

project(':ee:ee-lang') {
    dependencies {
        compile project(':ee:ee-lang_item')
        compile("com.fasterxml.jackson.module:jackson-module-kotlin") {
            exclude module: "kotlin-reflect"
        }
    }
}

project(':ee:ee-lang_gen') {
    dependencies {
        compile project(':ee:ee-lang_item')
    }
}

project(':ee:ee-task') {
    dependencies {
        compile project(':ee:ee-lang')
    }
}

project(':ee:ee-task_des') {
    dependencies {
        compile project(':ee:ee-design')
    }
}

project(':ee:ee-system_des') {
    dependencies {
        compile project(':ee:ee-task_des')
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

project(':ee:ee-system') {
    dependencies {
        compile project(':ee:ee-task')
    }
}

project(':ee:ee-design_task') {
    dependencies {
        compile project(':ee:ee-design')
        compile project(':ee:ee-system')
    }
}

project(':ee:ee-lang_fx') {
    apply plugin: 'application'
    if (Jvm.current().toString().startsWith('11')) {
        apply plugin: "org.openjfx.javafxplugin"

        javafx {
            modules = ['javafx.controls']
        }
    }

    mainClassName = 'ee.lang.fx.ModelApp'

    dependencies {
        compile project(':ee:ee-design_task')
        compile project(':ee:tornadoFxBom')
    }

    jar {
        manifest {
            attributes(
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'ee.lang.fx.ModelApp'
            )
        }
        from configurations.compile.collect { entry -> zipTree(entry) }
    }
}
